{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Westworld documentation Westworld is a multi-agent simulation library, its goal to simulate and optimize systems and environments with multiple agents interacting. Its inspiration is drawn from Unity software and Unity ML Agents , adapted in Python. The goal is to be able to simulate environments in logistics, retails, epidemiology, providing pre-coded spatial environments and communication between agents. Optimization can be included using heuristics as well as Reinforcement Learning. Abstract The name is of course inspired by the TV series Westworld, which is actually a gigantic multi-agent simulation system. Photo by Alexander London on Unsplash","title":"Home"},{"location":"#welcome-to-westworld-documentation","text":"Westworld is a multi-agent simulation library, its goal to simulate and optimize systems and environments with multiple agents interacting. Its inspiration is drawn from Unity software and Unity ML Agents , adapted in Python. The goal is to be able to simulate environments in logistics, retails, epidemiology, providing pre-coded spatial environments and communication between agents. Optimization can be included using heuristics as well as Reinforcement Learning. Abstract The name is of course inspired by the TV series Westworld, which is actually a gigantic multi-agent simulation system. Photo by Alexander London on Unsplash","title":"Welcome to Westworld documentation"},{"location":"examples/simple_pathfinding/","text":"Simple pathfinding Abstract In this page, a few examples of simulations to experiment with pathfinding Simple pathfinding In this simulation - All agents are moving towards the same point - When we left click we add an object - When we right click we change the point of attraction Python code for this simulation import time import pygame import numpy as np from westworld.environment.grid import GridEnvironment from westworld.agents.grid import GridAgent , Obstacle , Trigger from westworld.simulation.simulation import Simulation BOX_SIZE = 5 LOOKAHEAD = 15 target = ( 0 , 0 ) #----------------------------------------------------------- # DEFINING CLASSES #----------------------------------------------------------- class Agent ( GridAgent ): target = target def step ( self , env ): self . move_towards ( x = self . target [ 0 ], y = self . target [ 1 ], env = env , n = LOOKAHEAD ) class LargeSimulation ( Simulation ): def on_event ( self , event ): # If left click we add an obstacle if self . event_is_click ( event ): x , y = self . get_mouse_pos () obstacle = obstacle_spawner ( x , y ) env . add_object ( obstacle ) # If right click we change the direction for pathfinding if self . event_is_rightclick ( event ): new_target = self . get_mouse_pos () for agent in self . env . agents : agent . target = new_target #----------------------------------------------------------- # DEFINING SIMULATION #----------------------------------------------------------- # Prepare spawners and agent_spawner = lambda x , y : Agent ( x , y , 1 , 1 , BOX_SIZE ) obstacle_spawner = lambda x , y : Obstacle ( x , y , 5 , 5 , BOX_SIZE ,( 0 , 200 , 100 )) # Setup grid env = GridEnvironment ( BOX_SIZE , 200 , 100 ) env . spawn ( agent_spawner , 100 ) # Setup simulation sim = LargeSimulation ( env , fps = 25 ) sim . run_episode ( n_steps = 250 , save = True ) Clicking to add obstacles With more points Simulation when running is still slow, but replay is at a normal 25 FPS Simple Pathfinding with zones In this second example : - All agents are moving towards a different target point chosen randomly Python code for this simulation import time import pygame import numpy as np import random from westworld.environment.grid import GridEnvironment from westworld.agents.grid import GridAgent , Obstacle , Trigger from westworld.simulation.simulation import Simulation BOX_SIZE = 5 LOOKAHEAD = 15 WIDTH = 100 HEIGHT = 100 N_ZONES = 10 TARGETS = list ( zip ( np . random . randint ( 0 , WIDTH , N_ZONES ), np . random . randint ( 0 , HEIGHT , N_ZONES ))) #----------------------------------------------------------- # DEFINING SIMULATION #----------------------------------------------------------- class Agent ( GridAgent ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . target = random . choice ( TARGETS ) def step ( self , env ): self . move_towards ( x = self . target [ 0 ], y = self . target [ 1 ], env = env , n = LOOKAHEAD ) class PathfindingSimulationZones ( Simulation ): pass #----------------------------------------------------------- # DEFINING CLASSES #----------------------------------------------------------- # Setup spawners agent_spawner = lambda x , y : Agent ( x , y , 1 , 1 , BOX_SIZE ) # Setup grid env = GridEnvironment ( BOX_SIZE , WIDTH , HEIGHT ) env . spawn ( agent_spawner , 300 ) # Setup simulation sim = PathfindingSimulationZones ( env , fps = 25 ) sim . run_episode ( n_steps = 250 , save = True )","title":"Simple pathfinding"},{"location":"examples/simple_pathfinding/#simple-pathfinding","text":"Abstract In this page, a few examples of simulations to experiment with pathfinding","title":"Simple pathfinding"},{"location":"examples/simple_pathfinding/#simple-pathfinding_1","text":"In this simulation - All agents are moving towards the same point - When we left click we add an object - When we right click we change the point of attraction Python code for this simulation import time import pygame import numpy as np from westworld.environment.grid import GridEnvironment from westworld.agents.grid import GridAgent , Obstacle , Trigger from westworld.simulation.simulation import Simulation BOX_SIZE = 5 LOOKAHEAD = 15 target = ( 0 , 0 ) #----------------------------------------------------------- # DEFINING CLASSES #----------------------------------------------------------- class Agent ( GridAgent ): target = target def step ( self , env ): self . move_towards ( x = self . target [ 0 ], y = self . target [ 1 ], env = env , n = LOOKAHEAD ) class LargeSimulation ( Simulation ): def on_event ( self , event ): # If left click we add an obstacle if self . event_is_click ( event ): x , y = self . get_mouse_pos () obstacle = obstacle_spawner ( x , y ) env . add_object ( obstacle ) # If right click we change the direction for pathfinding if self . event_is_rightclick ( event ): new_target = self . get_mouse_pos () for agent in self . env . agents : agent . target = new_target #----------------------------------------------------------- # DEFINING SIMULATION #----------------------------------------------------------- # Prepare spawners and agent_spawner = lambda x , y : Agent ( x , y , 1 , 1 , BOX_SIZE ) obstacle_spawner = lambda x , y : Obstacle ( x , y , 5 , 5 , BOX_SIZE ,( 0 , 200 , 100 )) # Setup grid env = GridEnvironment ( BOX_SIZE , 200 , 100 ) env . spawn ( agent_spawner , 100 ) # Setup simulation sim = LargeSimulation ( env , fps = 25 ) sim . run_episode ( n_steps = 250 , save = True )","title":"Simple pathfinding"},{"location":"examples/simple_pathfinding/#clicking-to-add-obstacles","text":"","title":"Clicking to add obstacles"},{"location":"examples/simple_pathfinding/#with-more-points","text":"Simulation when running is still slow, but replay is at a normal 25 FPS","title":"With more points"},{"location":"examples/simple_pathfinding/#simple-pathfinding-with-zones","text":"In this second example : - All agents are moving towards a different target point chosen randomly Python code for this simulation import time import pygame import numpy as np import random from westworld.environment.grid import GridEnvironment from westworld.agents.grid import GridAgent , Obstacle , Trigger from westworld.simulation.simulation import Simulation BOX_SIZE = 5 LOOKAHEAD = 15 WIDTH = 100 HEIGHT = 100 N_ZONES = 10 TARGETS = list ( zip ( np . random . randint ( 0 , WIDTH , N_ZONES ), np . random . randint ( 0 , HEIGHT , N_ZONES ))) #----------------------------------------------------------- # DEFINING SIMULATION #----------------------------------------------------------- class Agent ( GridAgent ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . target = random . choice ( TARGETS ) def step ( self , env ): self . move_towards ( x = self . target [ 0 ], y = self . target [ 1 ], env = env , n = LOOKAHEAD ) class PathfindingSimulationZones ( Simulation ): pass #----------------------------------------------------------- # DEFINING CLASSES #----------------------------------------------------------- # Setup spawners agent_spawner = lambda x , y : Agent ( x , y , 1 , 1 , BOX_SIZE ) # Setup grid env = GridEnvironment ( BOX_SIZE , WIDTH , HEIGHT ) env . spawn ( agent_spawner , 300 ) # Setup simulation sim = PathfindingSimulationZones ( env , fps = 25 ) sim . run_episode ( n_steps = 250 , save = True )","title":"Simple Pathfinding with zones"},{"location":"examples/simple_visionrange/","text":"Simple Vision Range simulation Abstract For many simulations","title":"Simple vision range"},{"location":"examples/simple_visionrange/#simple-vision-range-simulation","text":"Abstract For many simulations","title":"Simple Vision Range simulation"},{"location":"resources/inspiration/","text":"Inspiration Software alternatives Unity NetLogo and the models library MESA - Python SPADE - Python abcEconomics GAMA-Platform Manim by the great Grant Sanderson / 3Blue1Browwn","title":"Inspiration"},{"location":"resources/inspiration/#inspiration","text":"","title":"Inspiration"},{"location":"resources/inspiration/#software-alternatives","text":"Unity NetLogo and the models library MESA - Python SPADE - Python abcEconomics GAMA-Platform Manim by the great Grant Sanderson / 3Blue1Browwn","title":"Software alternatives"},{"location":"resources/pathfinding/","text":"Pathfinding Note I took opportunity of that project to learn about many different optimization algorithms. And indeed to create traffic flow simulations, we need pathfinding algorithms running fast in the background. Learn more about how pathfinding was implemented in Westworld. Algorithms Options are Djikstra, A , flood filling, Voronoi diagrams, D Resources Articles Pathfinding detailed walkthrough and course - and many other resources by Amit Patel A* walkthrough by Patrick Lester Easy A* pathfinding by Nicolas Swift and improvements by Ryan Collinwood Pathfinding explained in Python Complete wikipedia page","title":"Pathfinding"},{"location":"resources/pathfinding/#pathfinding","text":"Note I took opportunity of that project to learn about many different optimization algorithms. And indeed to create traffic flow simulations, we need pathfinding algorithms running fast in the background. Learn more about how pathfinding was implemented in Westworld.","title":"Pathfinding"},{"location":"resources/pathfinding/#algorithms","text":"Options are Djikstra, A , flood filling, Voronoi diagrams, D","title":"Algorithms"},{"location":"resources/pathfinding/#resources","text":"","title":"Resources"},{"location":"resources/pathfinding/#articles","text":"Pathfinding detailed walkthrough and course - and many other resources by Amit Patel A* walkthrough by Patrick Lester Easy A* pathfinding by Nicolas Swift and improvements by Ryan Collinwood Pathfinding explained in Python Complete wikipedia page","title":"Articles"},{"location":"resources/resources/","text":"Resources Note Other resources worth noting","title":"Resources"},{"location":"resources/resources/#resources","text":"Note Other resources worth noting","title":"Resources"}]}