{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Westworld \u00b6 Photo by Alexander London on Unsplash Description \u00b6 Westworld is a multi-agent simulation library, its goal to simulate and optimize systems and environments with multiple agents interacting. Its inspiration is drawn from Unity software and Unity ML Agents , adapted in Python. The goal is to be able to simulate environments in logistics, retails, epidemiology, providing pre-coded spatial environments and communication between agents. Optimization can be included using heuristics as well as Reinforcement Learning. Experimental This library is extremely experimental, under active development and alpha-release Don't expect the documentation to be up-to-date or all features to be tested Please contact us if you have any question The name is of course inspired by the TV series Westworld, which is actually a gigantic multi-agent simulation system. Features \u00b6 Current features \u00b6 Easy creation of Grid and non-grid environments Objects (Agents, Obstacles, Collectibles, Triggers) Subclassing of different objects to create custom objects Spawner to generate objects randomly in the environment Basic rigid body system for all objects Simple agent behaviors (pathfinding, wandering, random walk, fleeing, vision range) Automatic maze generation Layer integration to convert image to obstacle and snap it to a grid Sample simulations and sample agents for classic simulations Simulation visualization, replay and export (gif or video) Roadmap features \u00b6 More classic simulations and tutorials (boids, sugarscape) Better pathfinding Easy Reinforcement Learning integration with Stable Baselines Other visualization functions than PyGame for web integration Installation \u00b6 Install from PyPi \u00b6 The library is available on PyPi via pip install westworld For developers \u00b6 You can clone the github repo / fork and develop locally Poetry is used for environment management, dependencies and publishing, after clone you can run # To setup the environment poetry install # To run Jupyter notebook or a python console poetry run jupyter notebook poetry run python Contributors \u00b6 Th\u00e9o Alves Da Costa","title":"Home"},{"location":"#westworld","text":"Photo by Alexander London on Unsplash","title":"Westworld"},{"location":"#description","text":"Westworld is a multi-agent simulation library, its goal to simulate and optimize systems and environments with multiple agents interacting. Its inspiration is drawn from Unity software and Unity ML Agents , adapted in Python. The goal is to be able to simulate environments in logistics, retails, epidemiology, providing pre-coded spatial environments and communication between agents. Optimization can be included using heuristics as well as Reinforcement Learning. Experimental This library is extremely experimental, under active development and alpha-release Don't expect the documentation to be up-to-date or all features to be tested Please contact us if you have any question The name is of course inspired by the TV series Westworld, which is actually a gigantic multi-agent simulation system.","title":"Description"},{"location":"#features","text":"","title":"Features"},{"location":"#current-features","text":"Easy creation of Grid and non-grid environments Objects (Agents, Obstacles, Collectibles, Triggers) Subclassing of different objects to create custom objects Spawner to generate objects randomly in the environment Basic rigid body system for all objects Simple agent behaviors (pathfinding, wandering, random walk, fleeing, vision range) Automatic maze generation Layer integration to convert image to obstacle and snap it to a grid Sample simulations and sample agents for classic simulations Simulation visualization, replay and export (gif or video)","title":"Current features"},{"location":"#roadmap-features","text":"More classic simulations and tutorials (boids, sugarscape) Better pathfinding Easy Reinforcement Learning integration with Stable Baselines Other visualization functions than PyGame for web integration","title":"Roadmap features"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-from-pypi","text":"The library is available on PyPi via pip install westworld","title":"Install from PyPi"},{"location":"#for-developers","text":"You can clone the github repo / fork and develop locally Poetry is used for environment management, dependencies and publishing, after clone you can run # To setup the environment poetry install # To run Jupyter notebook or a python console poetry run jupyter notebook poetry run python","title":"For developers"},{"location":"#contributors","text":"Th\u00e9o Alves Da Costa","title":"Contributors"},{"location":"references/","text":"References \u00b6 Pathfinding \u00b6 Articles \u00b6 Pathfinding detailed walkthrough and course - and many other resources by Amit Patel A* walkthrough by Patrick Lester Easy A* pathfinding by Nicolas Swift and improvements by Ryan Collinwood Pathfinding explained in Python Complete wikipedia page Software alternatives \u00b6 Unity NetLogo and the models library MESA - Python SPADE - Python abcEconomics GAMA-Platform Manim by the great Grant Sanderson / 3Blue1Browwn","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#pathfinding","text":"","title":"Pathfinding"},{"location":"references/#articles","text":"Pathfinding detailed walkthrough and course - and many other resources by Amit Patel A* walkthrough by Patrick Lester Easy A* pathfinding by Nicolas Swift and improvements by Ryan Collinwood Pathfinding explained in Python Complete wikipedia page","title":"Articles"},{"location":"references/#software-alternatives","text":"Unity NetLogo and the models library MESA - Python SPADE - Python abcEconomics GAMA-Platform Manim by the great Grant Sanderson / 3Blue1Browwn","title":"Software alternatives"},{"location":"api/","text":"API \u00b6 WIP","title":"API"},{"location":"api/#api","text":"WIP","title":"API"},{"location":"tutorials/simple_pathfinding/","text":"Simple pathfinding \u00b6 Abstract In this page, a few examples of simulations to experiment with pathfinding Simple pathfinding \u00b6 In this simulation - All agents are moving towards the same point - When we left click we add an object - When we right click we change the point of attraction Python code for this simulation import time import pygame import numpy as np from westworld.environment.grid import GridEnvironment from westworld.agents.grid import GridAgent , Obstacle , Trigger from westworld.simulation.simulation import Simulation BOX_SIZE = 5 LOOKAHEAD = 15 target = ( 0 , 0 ) #----------------------------------------------------------- # DEFINING CLASSES #----------------------------------------------------------- class Agent ( GridAgent ): target = target def step ( self , env ): self . move_towards ( x = self . target [ 0 ], y = self . target [ 1 ], env = env , n = LOOKAHEAD ) class LargeSimulation ( Simulation ): def on_event ( self , event ): # If left click we add an obstacle if self . event_is_click ( event ): x , y = self . get_mouse_pos () obstacle = obstacle_spawner ( x , y ) env . add_object ( obstacle ) # If right click we change the direction for pathfinding if self . event_is_rightclick ( event ): new_target = self . get_mouse_pos () for agent in self . env . agents : agent . target = new_target #----------------------------------------------------------- # DEFINING SIMULATION #----------------------------------------------------------- # Prepare spawners and agent_spawner = lambda x , y : Agent ( x , y , 1 , 1 , BOX_SIZE ) obstacle_spawner = lambda x , y : Obstacle ( x , y , 5 , 5 , BOX_SIZE ,( 0 , 200 , 100 )) # Setup grid env = GridEnvironment ( BOX_SIZE , 200 , 100 ) env . spawn ( agent_spawner , 100 ) # Setup simulation sim = LargeSimulation ( env , fps = 25 ) sim . run_episode ( n_steps = 250 , save = True ) Clicking to add obstacles \u00b6 With more points \u00b6 Simulation when running is still slow, but replay is at a normal 25 FPS Simple Pathfinding with zones \u00b6 In this second example : - All agents are moving towards a different target point chosen randomly Python code for this simulation import time import pygame import numpy as np import random from westworld.environment.grid import GridEnvironment from westworld.agents.grid import GridAgent , Obstacle , Trigger from westworld.simulation.simulation import Simulation BOX_SIZE = 5 LOOKAHEAD = 15 WIDTH = 100 HEIGHT = 100 N_ZONES = 10 TARGETS = list ( zip ( np . random . randint ( 0 , WIDTH , N_ZONES ), np . random . randint ( 0 , HEIGHT , N_ZONES ))) #----------------------------------------------------------- # DEFINING SIMULATION #----------------------------------------------------------- class Agent ( GridAgent ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . target = random . choice ( TARGETS ) def step ( self , env ): self . move_towards ( x = self . target [ 0 ], y = self . target [ 1 ], env = env , n = LOOKAHEAD ) class PathfindingSimulationZones ( Simulation ): pass #----------------------------------------------------------- # DEFINING CLASSES #----------------------------------------------------------- # Setup spawners agent_spawner = lambda x , y : Agent ( x , y , 1 , 1 , BOX_SIZE ) # Setup grid env = GridEnvironment ( BOX_SIZE , WIDTH , HEIGHT ) env . spawn ( agent_spawner , 300 ) # Setup simulation sim = PathfindingSimulationZones ( env , fps = 25 ) sim . run_episode ( n_steps = 250 , save = True )","title":"Simple pathfinding"},{"location":"tutorials/simple_pathfinding/#simple-pathfinding","text":"Abstract In this page, a few examples of simulations to experiment with pathfinding","title":"Simple pathfinding"},{"location":"tutorials/simple_pathfinding/#simple-pathfinding_1","text":"In this simulation - All agents are moving towards the same point - When we left click we add an object - When we right click we change the point of attraction Python code for this simulation import time import pygame import numpy as np from westworld.environment.grid import GridEnvironment from westworld.agents.grid import GridAgent , Obstacle , Trigger from westworld.simulation.simulation import Simulation BOX_SIZE = 5 LOOKAHEAD = 15 target = ( 0 , 0 ) #----------------------------------------------------------- # DEFINING CLASSES #----------------------------------------------------------- class Agent ( GridAgent ): target = target def step ( self , env ): self . move_towards ( x = self . target [ 0 ], y = self . target [ 1 ], env = env , n = LOOKAHEAD ) class LargeSimulation ( Simulation ): def on_event ( self , event ): # If left click we add an obstacle if self . event_is_click ( event ): x , y = self . get_mouse_pos () obstacle = obstacle_spawner ( x , y ) env . add_object ( obstacle ) # If right click we change the direction for pathfinding if self . event_is_rightclick ( event ): new_target = self . get_mouse_pos () for agent in self . env . agents : agent . target = new_target #----------------------------------------------------------- # DEFINING SIMULATION #----------------------------------------------------------- # Prepare spawners and agent_spawner = lambda x , y : Agent ( x , y , 1 , 1 , BOX_SIZE ) obstacle_spawner = lambda x , y : Obstacle ( x , y , 5 , 5 , BOX_SIZE ,( 0 , 200 , 100 )) # Setup grid env = GridEnvironment ( BOX_SIZE , 200 , 100 ) env . spawn ( agent_spawner , 100 ) # Setup simulation sim = LargeSimulation ( env , fps = 25 ) sim . run_episode ( n_steps = 250 , save = True )","title":"Simple pathfinding"},{"location":"tutorials/simple_pathfinding/#clicking-to-add-obstacles","text":"","title":"Clicking to add obstacles"},{"location":"tutorials/simple_pathfinding/#with-more-points","text":"Simulation when running is still slow, but replay is at a normal 25 FPS","title":"With more points"},{"location":"tutorials/simple_pathfinding/#simple-pathfinding-with-zones","text":"In this second example : - All agents are moving towards a different target point chosen randomly Python code for this simulation import time import pygame import numpy as np import random from westworld.environment.grid import GridEnvironment from westworld.agents.grid import GridAgent , Obstacle , Trigger from westworld.simulation.simulation import Simulation BOX_SIZE = 5 LOOKAHEAD = 15 WIDTH = 100 HEIGHT = 100 N_ZONES = 10 TARGETS = list ( zip ( np . random . randint ( 0 , WIDTH , N_ZONES ), np . random . randint ( 0 , HEIGHT , N_ZONES ))) #----------------------------------------------------------- # DEFINING SIMULATION #----------------------------------------------------------- class Agent ( GridAgent ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . target = random . choice ( TARGETS ) def step ( self , env ): self . move_towards ( x = self . target [ 0 ], y = self . target [ 1 ], env = env , n = LOOKAHEAD ) class PathfindingSimulationZones ( Simulation ): pass #----------------------------------------------------------- # DEFINING CLASSES #----------------------------------------------------------- # Setup spawners agent_spawner = lambda x , y : Agent ( x , y , 1 , 1 , BOX_SIZE ) # Setup grid env = GridEnvironment ( BOX_SIZE , WIDTH , HEIGHT ) env . spawn ( agent_spawner , 300 ) # Setup simulation sim = PathfindingSimulationZones ( env , fps = 25 ) sim . run_episode ( n_steps = 250 , save = True )","title":"Simple Pathfinding with zones"},{"location":"tutorials/simple_visionrange/","text":"Simple Vision Range simulation \u00b6 Abstract For many simulations we need to find objects in range Simple Range \u00b6 In this simulation agents in range turn red.","title":"Simple vision range"},{"location":"tutorials/simple_visionrange/#simple-vision-range-simulation","text":"Abstract For many simulations we need to find objects in range","title":"Simple Vision Range simulation"},{"location":"tutorials/simple_visionrange/#simple-range","text":"In this simulation agents in range turn red.","title":"Simple Range"}]}